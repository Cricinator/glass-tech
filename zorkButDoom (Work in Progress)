#include <iostream>
#include <ctime>
#include <cstdlib>
#include <cstring>

void printDivider() {
    std::cout << "\n------------------------\n\n";
}

void showOptions(const char* options[], int size) {
    for (int i = 0; i < size; ++i) {
        std::cout << i + 1 << ". " << options[i] << "\n";
    }
}

const char* generateDynamicResponse() {
    const char* dynamicResponses[] = {"I'm feeling great today!", "It's a beautiful day, isn't it?", "Ask me anything, I'm here to help!"};
    return dynamicResponses[rand() % (sizeof(dynamicResponses) / sizeof(dynamicResponses[0]))];
}

void npcDialog() {
    std::cout << "You encounter an NPC!\n";

    char question[100];
    std::cout << "Ask the NPC a question or insult them: ";
    std::cin.ignore(); // Ignore newline from previous input
    std::cin.getline(question, sizeof(question));

    if (strstr(question, "insult") || strstr(question, "rude")) {
        std::cout << "NPC: How rude! I won't talk to you anymore.\n";
    } else {
        const char* dynamicResponse = generateDynamicResponse();
        std::cout << "NPC: " << dynamicResponse << "\n";
    }
}

void combat(int& playerHealth, int& grenadeCount, int& ammoCount) {
    std::cout << "An enemy approaches!\n";

    int enemyHealth = rand() % 30 + 1;
    int enemyAttack = rand() % 15 + 1;

    while (enemyHealth > 0) {
        printDivider();
        std::cout << "Enemy Health: " << enemyHealth << "\n";

        const char* combatOptions[] = {"Shoot", "Melee", "Throw Grenade"};
        showOptions(combatOptions, sizeof(combatOptions) / sizeof(combatOptions[0]));

        int choice;
        std::cin >> choice;

        switch (choice) {
            case 1:
                if (ammoCount > 0) {
                    enemyHealth -= 10; // Gun damage
                    ammoCount--;
                } else {
                    std::cout << "You're out of ammo! Find an ammo pickup.\n";
                    continue;
                }
                break;
            case 2:
                enemyHealth -= 4; // Melee damage
                break;
            case 3:
                if (grenadeCount > 0) {
                    enemyHealth -= 20; // Grenade damage
                    grenadeCount--;
                } else {
                    std::cout << "You're out of grenades!\n";
                    continue;
                }
                break;
            default:
                std::cout << "Invalid choice!\n";
                continue;
        }

        if (enemyHealth > 0) {
            std::cout << "The enemy attacks you! You lose " << enemyAttack << " health.\n";
            playerHealth -= enemyAttack;
        } else {
            std::cout << "You defeated the enemy!\n";

            // Random chance to find ammo or grenade
            if (rand() % 5 == 0) {
                std::cout << "You found ammo!\n";
                ammoCount++;
            }
            if (rand() % 5 == 0) {
                std::cout << "You found a grenade!\n";
                grenadeCount++;
            }
        }
    }
}

void exploration(int& playerHealth, int& grenadeCount, int& ammoCount) {
    printDivider();
    const char* explorationOptions[] = {"Go left", "Go right", "Inspect surroundings", "Ask NPC"};
    showOptions(explorationOptions, sizeof(explorationOptions) / sizeof(explorationOptions[0]));

    int explorationChoice;
    std::cin >> explorationChoice;

    switch (explorationChoice) {
        case 1:
            std::cout << "You enter a dark room.\n";
            // Random chance of encountering an enemy
            if (rand() % 3 == 0) {
                combat(playerHealth, grenadeCount, ammoCount);
            }
            // Random chance of finding ammo or grenade
            if (rand() % 5 == 0) {
                std::cout << "You found ammo!\n";
                ammoCount++;
            }
            if (rand() % 5 == 0) {
                std::cout << "You found a grenade!\n";
                grenadeCount++;
            }
            break;
        case 2:
            std::cout << "You enter a mysterious room.\n";
            // Random chance of encountering an enemy
            if (rand() % 3 == 0) {
                combat(playerHealth, grenadeCount, ammoCount);
            }
            // Random chance of finding ammo or grenade
            if (rand() % 5 == 0) {
                std::cout << "You found ammo!\n";
                ammoCount++;
            }
            if (rand() % 5 == 0) {
                std::cout << "You found a grenade!\n";
                grenadeCount++;
            }
            break;
        case 3:
            std::cout << "You inspect the surroundings but find nothing unusual.\n";
            break;
        case 4:
            npcDialog();
            break;
        default:
            std::cout << "Invalid choice!\n";
    }
}

void bossBattle(int& ammoCount) {
    std::cout << "You encounter the Boss!\n";

    int bossHealth = 150;
    while (bossHealth > 0) {
        printDivider();
        std::cout << "Boss Health: " << bossHealth << "\n";

        const char* combatOptions[] = {"Shoot", "Melee", "Throw Grenade"};
        showOptions(combatOptions, sizeof(combatOptions) / sizeof(combatOptions[0]));

        int choice;
        std::cin >> choice;

        switch (choice) {
            case 1:
                if (ammoCount > 0) {
                    bossHealth -= 10; // Gun damage
                    ammoCount--;
                } else {
                    std::cout << "You're out of ammo! Find an ammo pickup.\n";
                    continue;
                }
                break;
            case 2:
                bossHealth -= 4; // Melee damage
                break;
            case 3:
                bossHealth -= 20; // Grenade damage
                break;
            default:
                std::cout << "Invalid choice!\n";
                continue;
        }

        if (bossHealth > 0) {
            std::cout << "The Boss attacks you! You lose " << (rand() % 20 + 10) << " health.\n";
        }
    }

    printDivider();
    std::cout << "You defeated the Boss! Congratulations, you are victorious!\n";
}

int main() {
    srand(time(0));

    std::cout << "Welcome to the RPG-like game!\n";
    std::cout << "You find yourself in a dark corridor.\n";

    int playerHealth = 100;
    int grenadeCount = 3;
    int ammoCount = 10; // Starting ammo

    while (playerHealth > 0) {
        printDivider();
        std::cout << "Player Health: " << playerHealth << "\n";

        if (rand() % 4 == 0) {
            npcDialog();
        } else {
            combat(playerHealth, grenadeCount, ammoCount);
        }

        exploration(playerHealth, grenadeCount, ammoCount);

        if (rand() % 8 == 0) {
            printDivider();
            std::cout << "You move to a new area.\n";
        }

        if (rand() % 15 == 0) {
            bossBattle(ammoCount);
            break;
        }
    }

    if (playerHealth <= 0) {
        printDivider();
        std::cout << "You have been defeated. Game over.\n";
    }

    return 0;
}