#include <iostream>
#include <cstdlib>
#include <ctime>
#include <limits>
#include <string>
#include <algorithm>

char board[3][3] = {{' ', ' ', ' '}, {' ', ' ', ' '}, {' ', ' ', ' '}};
int playerWins = 0, playerLosses = 0, computerWins = 0, computerLosses = 0;
std::string playerSymbol;

void displayBoard() {
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j)
            std::cout << board[i][j] << (j < 2 ? " | " : "");
        std::cout << (i < 2 ? "\n---------\n" : "\n");
    }
}

bool checkWin(char symbol) {
    for (int i = 0; i < 3; ++i)
        if ((board[i][0] == symbol && board[i][1] == symbol && board[i][2] == symbol) ||
            (board[0][i] == symbol && board[1][i] == symbol && board[2][i] == symbol))
            return true;
    return (board[0][0] == symbol && board[1][1] == symbol && board[2][2] == symbol) ||
           (board[0][2] == symbol && board[1][1] == symbol && board[2][0] == symbol);
}

bool isBoardFull() {
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            if (board[i][j] == ' ')
                return false;
    return true;
}

void getPlayerMove() {
    int row, col;
    while (true) {
        std::cout << "Please enter your move (row and column): ";
        std::cin >> row >> col;
        if (row < 1 || row > 3 || col < 1 || col > 3 || board[row - 1][col - 1] != ' ')
            std::cout << "Invalid move. Please try again.\n";
        else {
            board[row - 1][col - 1] = playerSymbol[0];
            break;
        }
    }
}

void getComputerMove() {
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            if (board[i][j] == ' ') {
                board[i][j] = (playerSymbol == "x") ? 'O' : 'X';
                if (checkWin(board[i][j]))
                    return;
                board[i][j] = ' ';
            }

    int row, col;
    do {
        row = rand() % 3;
        col = rand() % 3;
    } while (board[row][col] != ' ');

    board[row][col] = (playerSymbol == "x") ? 'O' : 'X';
}

void resetGame() {
    for (int i = 0; i < 3; ++i)
        for (int j = 0; j < 3; ++j)
            board[i][j] = ' ';
}

int main() {
    srand(static_cast<unsigned int>(time(nullptr)));
    std::string continueGame;

    while (true) {
        while (true) {
            std::cout << "Choose 'X' or 'O' for your moves: ";
            std::cin >> playerSymbol;

            // Convert to lowercase for case-insensitivity
            std::transform(playerSymbol.begin(), playerSymbol.end(), playerSymbol.begin(), ::tolower);

            // Validate player's choice
            if (playerSymbol == "x" || playerSymbol == "o") {
                break;
            } else {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "Invalid choice. Please enter 'X' or 'O'.\n";
            }
        }

        while (true) {
            displayBoard();
            getPlayerMove();
            if (checkWin(playerSymbol[0])) {
                std::cout << "Congratulations! You win!\n";
                ++playerWins, ++computerLosses;
                break;
            }
            if (isBoardFull()) {
                std::cout << "It's a tie!\n";
                break;
            }
            getComputerMove();
            displayBoard();
            if (checkWin((playerSymbol == "x") ? 'O' : 'X')) {
                std::cout << "Computer wins! Better luck next time.\n";
                ++computerWins, ++playerLosses;
                break;
            }
            if (isBoardFull()) {
                std::cout << "It's a tie!\n";
                break;
            }
        }

        std::cout << "Player Wins: " << playerWins << " | Player Losses: " << playerLosses << '\n';
        std::cout << "Computer Wins: " << computerWins << " | Computer Losses: " << computerLosses << '\n';

        while (true) {
            std::cout << "Do you want to play again? (Enter 'Y' for yes or 'N' for no): ";
            std::cin >> continueGame;

            // Convert to lowercase for case-insensitivity
            std::transform(continueGame.begin(), continueGame.end(), continueGame.begin(), ::tolower);

            // Validate user input
            if (continueGame == "y" || continueGame == "n") {
                break;
            } else {
                std::cin.clear();
                std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\n');
                std::cout << "Invalid input. Please enter 'Y' for yes or 'N' for no.\n";
            }
        }

        if (continueGame == "n") {
            std::cout << "Thanks for playing. Game ended.\n";
            break;
        }

        resetGame();
    }

    return 0;
}